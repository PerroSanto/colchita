
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENRPARENleftLETINENDleftFUNEQUALleftVALEQUALCHARS COMMA END EQUAL FUN IN LET LPAREN RPAREN SEW TURN VALexp : name \n            | name LPAREN actuals RPAREN \n            | TURN LPAREN exp RPAREN \n            | SEW LPAREN exp COMMA exp RPAREN \n            | LET decls IN exp ENDactuals : exp\n                | exp COMMA actualsdecls : decl\n            | decl declsdecl : FUN name LPAREN formals RPAREN EQUAL exp\n            | VAL name EQUAL expformals : name\n                | name COMMA formalsname : CHARS\n            | name CHARS'
    
_lr_action_items = {'TURN':([0,7,9,10,19,24,26,29,40,],[3,3,3,3,3,3,3,3,3,]),'SEW':([0,7,9,10,19,24,26,29,40,],[4,4,4,4,4,4,4,4,4,]),'LET':([0,7,9,10,19,24,26,29,40,],[5,5,5,5,5,5,5,5,5,]),'CHARS':([0,2,6,7,8,9,10,13,14,19,21,22,24,26,28,29,33,37,40,],[6,8,-14,6,-15,6,6,6,6,6,8,8,6,6,6,6,8,6,6,]),'$end':([1,2,6,8,23,25,32,36,],[0,-1,-14,-15,-2,-3,-5,-4,]),'COMMA':([2,6,8,16,18,23,25,32,33,36,],[-1,-14,-15,24,26,-2,-3,-5,37,-4,]),'RPAREN':([2,6,8,15,16,17,23,25,30,31,32,33,34,36,39,],[-1,-14,-15,23,-6,25,-2,-3,-7,36,-5,-12,38,-4,-13,]),'END':([2,6,8,23,25,27,32,36,],[-1,-14,-15,-2,-3,32,-5,-4,]),'FUN':([2,5,6,8,12,23,25,32,35,36,41,],[-1,13,-14,-15,13,-2,-3,-5,-11,-4,-10,]),'VAL':([2,5,6,8,12,23,25,32,35,36,41,],[-1,14,-14,-15,14,-2,-3,-5,-11,-4,-10,]),'IN':([2,6,8,11,12,20,23,25,32,35,36,41,],[-1,-14,-15,19,-8,-9,-2,-3,-5,-11,-4,-10,]),'LPAREN':([2,3,4,6,8,21,],[7,9,10,-14,-15,28,]),'EQUAL':([6,8,22,38,],[-14,-15,29,40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([0,7,9,10,19,24,26,29,40,],[1,16,17,18,27,16,31,35,41,]),'name':([0,7,9,10,13,14,19,24,26,28,29,37,40,],[2,2,2,2,21,22,2,2,2,33,2,33,2,]),'decls':([5,12,],[11,20,]),'decl':([5,12,],[12,12,]),'actuals':([7,24,],[15,30,]),'formals':([28,37,],[34,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> name','exp',1,'p_exp','analizador_sintactico.py',28),
  ('exp -> name LPAREN actuals RPAREN','exp',4,'p_exp','analizador_sintactico.py',29),
  ('exp -> TURN LPAREN exp RPAREN','exp',4,'p_exp','analizador_sintactico.py',30),
  ('exp -> SEW LPAREN exp COMMA exp RPAREN','exp',6,'p_exp','analizador_sintactico.py',31),
  ('exp -> LET decls IN exp END','exp',5,'p_exp','analizador_sintactico.py',32),
  ('actuals -> exp','actuals',1,'p_actuals','analizador_sintactico.py',50),
  ('actuals -> exp COMMA actuals','actuals',3,'p_actuals','analizador_sintactico.py',51),
  ('decls -> decl','decls',1,'p_decls','analizador_sintactico.py',60),
  ('decls -> decl decls','decls',2,'p_decls','analizador_sintactico.py',61),
  ('decl -> FUN name LPAREN formals RPAREN EQUAL exp','decl',7,'p_decl','analizador_sintactico.py',70),
  ('decl -> VAL name EQUAL exp','decl',4,'p_decl','analizador_sintactico.py',71),
  ('formals -> name','formals',1,'p_formals','analizador_sintactico.py',81),
  ('formals -> name COMMA formals','formals',3,'p_formals','analizador_sintactico.py',82),
  ('name -> CHARS','name',1,'p_name','analizador_sintactico.py',91),
  ('name -> name CHARS','name',2,'p_name','analizador_sintactico.py',92),
]
